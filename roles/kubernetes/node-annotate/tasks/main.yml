---
- name: Kubernetes Apps | Wait for kube-apiserver
  uri:
    url: "{{ kube_apiserver_endpoint }}/healthz"
    validate_certs: false
    client_cert: "{{ kube_apiserver_client_cert }}"
    client_key: "{{ kube_apiserver_client_key }}"
  register: result
  until: result.status == 200
  retries: 10
  delay: 6
  when: inventory_hostname == groups['kube_control_plane'][0]

- name: Set role node annotation to empty list
  set_fact:
    role_node_annotations: []

- name: Node annotation for nvidia GPU nodes
  set_fact:
    role_node_annotations: "{{ role_node_annotations + [{'key': 'nvidia.com/gpu', 'value': 'true'}] }}"
  when:
    - nvidia_gpu_nodes is defined
    - nvidia_accelerator_enabled | bool
    - inventory_hostname in nvidia_gpu_nodes

- name: Set inventory node annotation to empty list
  set_fact:
    inventory_node_annotations: []

- name: Populate inventory node annotation
  set_fact:
    inventory_node_annotations: "{{ inventory_node_annotations + [{'key': item.key, 'value': item.value}] }}"
  loop: "{{ node_annotations | d({}) | dict2items }}"
  when:
    - node_annotations is defined
    - node_annotations is mapping

- debug:
    msg: "Role Node Annotations: {{ role_node_annotations }}"
- debug:
    msg: "Inventory Node Annotations: {{ inventory_node_annotations }}"

- name: Set annotation on node
  shell: >-
    {{ kubectl }} annotate node {% if kube_override_hostname %}{{ kube_override_hostname }}{% else %}{{ inventory_hostname }}{% endif %} {{ item.key }}="{{ item.value }}" --overwrite=true
  loop: "{{ role_node_annotations + inventory_node_annotations }}"
  delegate_to: "{{ groups['kube_control_plane'][0] }}"
  changed_when: false
...
